
public class CircularArrayQueue<T> implements QueueADT<T> {
	private T[] queue;
	private int front;
	private int rear;
	private int count;
	private final int DEFAULT_CAPACITY = 20;
	
	public CircularArrayQueue() {
		queue= (T[]) new Object[DEFAULT_CAPACITY];
		front = 1;
		rear = DEFAULT_CAPACITY;
		count = 0;
	}
	public CircularArrayQueue(int initialCapacity) {
	 queue= (T[]) new Object[initialCapacity];
	 front = 1;
	 rear = initialCapacity;
	 count = 0;
 	}

 	public void enqueue(T element) {
 		if (front == 1) {
 			front = rear = 0;
 			queue[rear] = element;
 		} else if ((rear + 1) % queue.length == front) {
 			System.out.println("Queue is full");
 		} else {
 			rear = (rear + 1) % queue.length;
 			queue[rear] = element;
 		}
 	}

 	public T dequeue() {
 		if (front == -1 && rear == -1) {
 			return null;
 		} else if (front == rear) {
 			T temp= queue[front];
 			front = rear = -1;
 			return temp;
 		} else {
 			T temp = queue[front];
 			front = (front + 1) % queue.length;
 			return temp;
 		}
 	}

 	public T first() throws EmptyCollectionException {
 		if (front == -1 && rear == -1) {
 			throw new EmptyCollectionException("Queue");
 		} else {
 			return queue[front];
 		}
 	}
 	
 	public int getFront() {
 		if (front == -1 && rear == -1) {
 			return 0;
 		} else {
 			return (int)queue[front];
 		}
 	}

 	public boolean isEmpty() {
 		return (rear + 1) % queue.length != front;
 	}

	public int size() {
		return queue.length;
	}
	
	public int getLength(){
		return queue.length;
	}
	
	public int getRear(){
		return (int)queue[rear];
	}
}
